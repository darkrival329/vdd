---
# tasks/main.yml â€“ robust pom.xml updater with FQCN & schema validation
# -----------------------------------------------------------------------------

- name: Assert config entries are well-formed
  ansible.builtin.assert:
    that:
      - item.artifactId is defined
      - item.version is defined
    fail_msg: "Malformed config entry: {{ item }}"
  loop: "{{ (global.dependencies | default([])) +
            (global.build_plugins | default([])) +
            (global.plugin_dependencies | default([])) }}"

- name: Validate required variables
  ansible.builtin.fail:
    msg: "{{ item }} is not defined in dependency_config.json"
  when: "{{ item }} is not defined"
  loop:
    - global.properties
    - global.dependencies
    - global.build_plugins
    - global.plugin_dependencies
    - global.release_version
    - global.release_date

- name: Assert pom.xml exists
  ansible.builtin.stat:
    path: "{{ pom_file }}"
  register: pom_stat

- name: Abort if pom.xml is missing
  ansible.builtin.fail:
    msg: "{{ pom_file }} does not exist"
  when: not pom_stat.stat.exists

- name: Update Maven properties from config
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "//pom:properties/pom:{{ item.key }}"
    namespaces:
      pom: "{{ pom_ns }}"
    value: "{{ item.value }}"
    pretty_print: true
  loop: "{{ global.properties | dict2items }}"
  when: global.properties is defined

- name: Update dependency versions in pom.xml
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "//pom:dependency[pom:artifactId='{{ item.artifactId }}']/pom:version"
    namespaces:
      pom: "{{ pom_ns }}"
    value: "{{ item.version }}"
    pretty_print: true
  loop: "{{ global.dependencies }}"
  when: global.dependencies is defined
  register: result_dependencies

- name: Warn on failed dependency updates
  ansible.builtin.debug:
    msg: "Warning: failed to update dependency {{ item.item.artifactId }}"
  loop: "{{ result_dependencies.results }}"
  loop_control:
    label: "{{ item.item.artifactId }}"
  when: item.failed

- name: Update build plugin versions in pom.xml
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "//pom:plugin[pom:artifactId='{{ item.artifactId }}']/pom:version"
    namespaces:
      pom: "{{ pom_ns }}"
    value: "{{ item.version }}"
    pretty_print: true
  loop: "{{ global.build_plugins }}"
  when: global.build_plugins is defined
  register: result_plugins

- name: Warn on failed plugin updates
  ansible.builtin.debug:
    msg: "Warning: failed to update plugin {{ item.item.artifactId }}"
  loop: "{{ result_plugins.results }}"
  loop_control:
    label: "{{ item.item.artifactId }}"
  when: item.failed

- name: Update plugin-scoped dependency versions
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "//pom:plugin[pom:artifactId='{{ item.pluginArtifactId }}']//pom:dependency[pom:artifactId='{{ item.artifactId }}']/pom:version"
    namespaces:
      pom: "{{ pom_ns }}"
    value: "{{ item.version }}"
    pretty_print: true
  loop: "{{ global.plugin_dependencies }}"
  when: global.plugin_dependencies is defined
  register: result_plugin_deps

- name: Warn on failed plugin-scoped dependency updates
  ansible.builtin.debug:
    msg: "Warning: failed to update plugin dependency {{ item.item.pluginArtifactId }} -> {{ item.item.artifactId }}"
  loop: "{{ result_plugin_deps.results }}"
  loop_control:
    label: "{{ item.item.artifactId }}"
  when: item.failed

- name: Set default changelog path
  ansible.builtin.set_fact:
    changelog_path: "{{ changelog_path | default('CHANGELOG.md') }}"

- name: Check if changelog exists
  ansible.builtin.stat:
    path: "{{ changelog_path }}"
  register: changelog_stat

- name: Ensure changelog directory exists
  ansible.builtin.file:
    path: "{{ changelog_path | dirname }}"
    state: directory
  when: (changelog_path | dirname) not in ['', '.']

- name: Read existing changelog content
  ansible.builtin.slurp:
    path: "{{ changelog_path }}"
  register: changelog_content
  when: changelog_stat.stat.exists

- name: Generate new changelog entry
  ansible.builtin.template:
    src: changelog_entry.md.j2
    dest: "{{ playbook_dir }}/.changelog_entry.md"
  register: new_entry_file
  when:
    - global.release_version is defined
    - global.release_date is defined
    - not changelog_stat.stat.exists or
      (changelog_stat.stat.exists and
       global.release_version not in (changelog_content.content | b64decode))

- name: Read new changelog entry
  ansible.builtin.slurp:
    path: "{{ playbook_dir }}/.changelog_entry.md"
  register: new_entry_content
  when: new_entry_file.changed

- name: Set new entry fact
  ansible.builtin.set_fact:
    new_entry: "{{ new_entry_content.content | b64decode }}"
  when: new_entry_file.changed

- name: Debug new changelog entry
  ansible.builtin.debug:
    msg: "{{ new_entry }}"
  when: debug_mode | bool and new_entry is defined

- name: Render changelog
  ansible.builtin.template:
    src: changelog.md.j2
    dest: "{{ changelog_path }}"
    force: yes
  when:
    - global.release_version is defined
    - global.release_date is defined

- name: Clean up temporary changelog entry
  ansible.builtin.file:
    path: "{{ playbook_dir }}/.changelog_entry.md"
    state: absent
  when: new_entry_file.changed

- name: Show overall change status
  ansible.builtin.debug:
    msg: "Tasks completed. Inspect git diff for changes."
